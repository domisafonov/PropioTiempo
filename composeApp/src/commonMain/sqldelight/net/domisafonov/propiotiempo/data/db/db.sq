import kotlinx.datetime.Instant;

-- TODO: a timezones table to interpret historical data according to the correct
--  time representation
-- TODO: activity-wise day offsets relative to local time (to the time recorded
--  in the timezones table)

-- must be referenced with older_version _at most_ 1 time
-- being referenced with older_version implies is_enabled=0
CREATE TABLE activities (
  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
  name TEXT NOT NULL,
  older_version INTEGER,
  is_enabled INTEGER,

  FOREIGN KEY(older_version) REFERENCES activities(id)
    ON DELETE SET NULL ON UPDATE RESTRICT
);
CREATE INDEX activities_names ON activities (name);
CREATE UNIQUE INDEX activities_older_versions ON activities (older_version);

CREATE TABLE time_activities (
  id INTEGER NOT NULL PRIMARY KEY,

  FOREIGN KEY(id) REFERENCES activities(id) ON DELETE CASCADE ON UPDATE RESTRICT
);

CREATE TABLE daily_checklist (
  id INTEGER NOT NULL PRIMARY KEY,

  FOREIGN KEY(id) REFERENCES activities(id) ON DELETE CASCADE ON UPDATE RESTRICT
);

CREATE TABLE daily_checklist_items (
  id INTEGER NOT NULL PRIMARY KEY,
  name TEXT
);

CREATE TABLE daily_checklist_item_map (
  daily_checklist_id INTEGER NOT NULL,
  daily_checklist_item_id INTEGER NOT NULL,
  ordinal INTEGER NOT NULL,

  PRIMARY KEY(daily_checklist_id, daily_checklist_item_id),
  FOREIGN KEY(daily_checklist_id) REFERENCES activities(id)
    ON DELETE CASCADE ON UPDATE RESTRICT,
  FOREIGN KEY(daily_checklist_item_id) REFERENCES daily_checklist_items(id)
    ON DELETE CASCADE ON UPDATE RESTRICT
) WITHOUT ROWID;
CREATE UNIQUE INDEX daily_checklist_item_order
  ON daily_checklist_item_map (daily_checklist_id, ordinal);

CREATE TABLE time_activity_intervals (
  activity_id INTEGER NOT NULL,
  start_time INTEGER AS Instant NOT NULL,
  end_time INTEGER AS Instant,

  PRIMARY KEY(activity_id, start_time),
  FOREIGN KEY(activity_id) REFERENCES time_activities(id)
    ON DELETE CASCADE ON UPDATE RESTRICT,
  CHECK (start_time <= end_time)
) WITHOUT ROWID;

CREATE TABLE daily_checklist_checks (
  daily_checklist_item_id INTEGER NOT NULL,
  time INTEGER AS Instant NOT NULL,

  PRIMARY KEY(daily_checklist_item_id, time),
  FOREIGN KEY(daily_checklist_item_id) REFERENCES daily_checklist_items(id)
    ON DELETE CASCADE ON UPDATE RESTRICT
) WITHOUT ROWID;

-- TODO: remove test data
INSERT INTO activities VALUES(1, 'emptyone', NULL, TRUE);
INSERT INTO activities VALUES(2, 'hasdatatwo', NULL, TRUE);
INSERT INTO activities VALUES(3, 'oldthree', NULL, FALSE);
INSERT INTO activities VALUES(4, 'newfour', 3, TRUE);
INSERT INTO activities VALUES(5, 'chl5', NULL, TRUE);
INSERT INTO activities VALUES(6, 'oldchl6', NULL, FALSE);
INSERT INTO activities VALUES(7, 'newchl7', 7, TRUE);
INSERT INTO activities VALUES(8, 'mptchl8', 8, TRUE);
INSERT INTO activities VALUES(9, 'nocheckschl9', 9, TRUE);

INSERT INTO time_activities VALUES (1);
INSERT INTO time_activities VALUES (2);
INSERT INTO time_activities VALUES (3);
INSERT INTO time_activities VALUES (4);
INSERT INTO daily_checklist VALUES (5);
INSERT INTO daily_checklist VALUES (6);
INSERT INTO daily_checklist VALUES (7);
INSERT INTO daily_checklist VALUES (8);
INSERT INTO daily_checklist VALUES (9);

INSERT INTO daily_checklist_items VALUES(1, '5i1');
INSERT INTO daily_checklist_items VALUES(2, '5i2');

INSERT INTO daily_checklist_items VALUES(3, '6i1');
INSERT INTO daily_checklist_items VALUES(4, '6i2');

INSERT INTO daily_checklist_items VALUES(5, '7i1');

INSERT INTO daily_checklist_items VALUES(6, '9i1');

INSERT INTO daily_checklist_item_map VALUES(5, 1, 0);
INSERT INTO daily_checklist_item_map VALUES(5, 2, 1);

INSERT INTO daily_checklist_item_map VALUES(6, 3, 0);
INSERT INTO daily_checklist_item_map VALUES(6, 4, 1);

INSERT INTO daily_checklist_item_map VALUES(7, 5, 1);
INSERT INTO daily_checklist_item_map VALUES(7, 4, 0);

INSERT INTO daily_checklist_item_map VALUES(9, 6, 0);
-- TODO: end remove test data

get_inserted_autoid:
SELECT last_insert_rowid();

insert_daily_checklist_check:
INSERT INTO daily_checklist_checks VALUES(?, ?);

get_daily_checklist_summary:
SELECT
  a.id AS id,
  a.name AS name,
  (count(i.id) - count(cc.daily_checklist_item_id)) = 0 AS is_completed
  FROM daily_checklist AS c
  INNER JOIN activities AS a ON c.id = a.id
  INNER JOIN daily_checklist_item_map AS m ON c.id = m.daily_checklist_id
  INNER JOIN daily_checklist_items AS i ON m.daily_checklist_item_id = i.id
  LEFT JOIN daily_checklist_checks AS cc
    ON m.daily_checklist_item_id = cc.daily_checklist_item_id
    AND cc.time >= :day_start
  WHERE a.is_enabled = TRUE
  GROUP BY a.id
  ORDER BY a.name;

get_time_activities_summary:
SELECT
  a.id AS id,
  a.name AS name,
  total(
    iif(
      i.start_time IS NULL,
      0,
      ifnull(i.end_time, :current_time) - max(:day_start, i.start_time)
    )
  ) AS sum,
  sum((i.start_time IS NOT NULL) - (i.end_time IS NOT NULL)) > 0 AS is_active
  FROM time_activities AS ta
  INNER JOIN activities AS a ON ta.id = a.id
  LEFT JOIN time_activity_intervals AS i
    ON ta.id = i.activity_id
    AND (i.end_time IS NULL OR i.end_time >= :day_start)
  WHERE
    a.is_enabled = TRUE
  GROUP BY a.id
  ORDER BY a.name;

get_active_time_activity_interval:
SELECT
  start_time AS start_time
  FROM time_activity_intervals AS i
  WHERE i.activity_id = ? AND i.end_time IS NULL;

insert_time_activity_interval:
INSERT INTO time_activity_intervals(activity_id, start_time, end_time)
  VALUES (:activity_id, :start_time, NULL);

end_time_activity_interval:
UPDATE time_activity_intervals
  SET end_time = :end_time
  WHERE activity_id = :activity_id AND start_time = :start_time;

get_activity_name:
SELECT name FROM activities WHERE id = :id;

get_daily_checklist_items:
SELECT
  i.id AS item_id,
  i.name AS name,
  cc.time AS checked_time
  FROM daily_checklist AS c
  INNER JOIN daily_checklist_item_map AS m ON c.id = m.daily_checklist_id
  INNER JOIN daily_checklist_items AS i ON m.daily_checklist_item_id = i.id
  LEFT JOIN daily_checklist_checks AS cc
    ON m.daily_checklist_item_id = cc.daily_checklist_item_id
    AND cc.time > :day_start
  WHERE c.id = :daily_checklist_id
  ORDER BY m.ordinal;

delete_daily_checklist_check:
DELETE
  FROM daily_checklist_checks
  WHERE daily_checklist_item_id = :daily_checklist_item_id AND time = :time;

update_daily_checklist_check_time:
UPDATE daily_checklist_checks
  SET time = :new_time
  WHERE daily_checklist_item_id = :daily_checklist_item_id AND time = :old_time;

get_days_time_activity_intervals:
SELECT
  start_time, end_time
  FROM time_activity_intervals AS i
  WHERE
    i.activity_id = :time_activity_id
    AND (i.end_time IS NULL OR i.end_time >= :day_start)
  ORDER BY i.start_time;

update_time_activity_interval_start:
UPDATE time_activity_intervals
  SET start_time = :new_start_time
  WHERE activity_id = :activity_id AND start_time = :old_start_time;

update_time_activity_interval_time:
UPDATE time_activity_intervals
  SET start_time = :new_start_time, end_time = :new_end_time
  WHERE activity_id = :activity_id AND start_time = :old_start_time;

delete_time_activity_interval:
DELETE
  FROM time_activity_intervals
  WHERE activity_id = :activity_id AND start_time = :start_time;
